{
  "__symbolic": "module",
  "version": 4,
  "metadata": {
    "flyIn": {
      "__symbolic": "call",
      "expression": {
        "__symbolic": "reference",
        "module": "@angular/animations",
        "name": "trigger"
      },
      "arguments": [
        "flyIn",
        [
          {
            "__symbolic": "call",
            "expression": {
              "__symbolic": "reference",
              "module": "@angular/animations",
              "name": "state"
            },
            "arguments": [
              "in",
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/animations",
                  "name": "style"
                },
                "arguments": [{ "transform": "translateX(0)" }]
              }
            ]
          },
          {
            "__symbolic": "call",
            "expression": {
              "__symbolic": "reference",
              "module": "@angular/animations",
              "name": "transition"
            },
            "arguments": [
              "void => *",
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/animations",
                    "name": "animate"
                  },
                  "arguments": [
                    300,
                    {
                      "__symbolic": "call",
                      "expression": {
                        "__symbolic": "reference",
                        "module": "@angular/animations",
                        "name": "keyframes"
                      },
                      "arguments": [
                        [
                          {
                            "__symbolic": "call",
                            "expression": {
                              "__symbolic": "reference",
                              "module": "@angular/animations",
                              "name": "style"
                            },
                            "arguments": [
                              {
                                "opacity": 0,
                                "transform": "translateX(100%)",
                                "offset": 0
                              }
                            ]
                          },
                          {
                            "__symbolic": "call",
                            "expression": {
                              "__symbolic": "reference",
                              "module": "@angular/animations",
                              "name": "style"
                            },
                            "arguments": [
                              {
                                "opacity": 1,
                                "transform": "translateX(50%)",
                                "offset": 0.5
                              }
                            ]
                          },
                          {
                            "__symbolic": "call",
                            "expression": {
                              "__symbolic": "reference",
                              "module": "@angular/animations",
                              "name": "style"
                            },
                            "arguments": [
                              {
                                "opacity": 1,
                                "transform": "translateX(0)",
                                "offset": 1
                              }
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    "fadeIn": {
      "__symbolic": "call",
      "expression": {
        "__symbolic": "reference",
        "module": "@angular/animations",
        "name": "trigger"
      },
      "arguments": [
        "fadeIn",
        [
          {
            "__symbolic": "call",
            "expression": {
              "__symbolic": "reference",
              "module": "@angular/animations",
              "name": "transition"
            },
            "arguments": [
              "void => *",
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/animations",
                    "name": "style"
                  },
                  "arguments": [{ "opacity": 0 }]
                },
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/animations",
                    "name": "animate"
                  },
                  "arguments": [
                    600,
                    {
                      "__symbolic": "call",
                      "expression": {
                        "__symbolic": "reference",
                        "module": "@angular/animations",
                        "name": "style"
                      },
                      "arguments": [{ "opacity": 1 }]
                    }
                  ]
                }
              ]
            ]
          },
          {
            "__symbolic": "call",
            "expression": {
              "__symbolic": "reference",
              "module": "@angular/animations",
              "name": "transition"
            },
            "arguments": [
              "* => void",
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/animations",
                    "name": "animate"
                  },
                  "arguments": [
                    600,
                    {
                      "__symbolic": "call",
                      "expression": {
                        "__symbolic": "reference",
                        "module": "@angular/animations",
                        "name": "style"
                      },
                      "arguments": [{ "opacity": 0 }]
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    "Éµa": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-search-form",
              "template":
                "<form #searchForm=\"ngForm\"> <div layout=\"row\" layout-wrap layout-margin layout-align=\"start center\"> <div flex-xs=\"50\" flex-gt-xs=\"25\" layout=\"row\" *ngFor=\"let control of elements\" [ngSwitch]=\"control.type\"> <mat-checkbox flex=\"95\" (change)=\"change()\" *ngSwitchCase=\"'boolean'\" [(ngModel)]=\"value[control.name]\" [name]=\"control.name\"> {{control.label}} </mat-checkbox> <mat-form-field flex=\"95\" *ngSwitchCase=\"'enum'\"> <mat-select (change)=\"change()\" [name]=\"control.name\" [(ngModel)]=\"value[control.name]\" [placeholder]=\"control.label\"> <ng-template ngFor let-opt [ngForOf]=\"control.selections\"> <mat-option *ngIf=\"isObject(opt)\" [value]=\"opt.key\">{{opt.value}}</mat-option> <mat-option *ngIf=\"!isObject(opt)\" [value]=\"opt\">{{opt}}</mat-option> </ng-template> </mat-select> </mat-form-field> <mat-form-field flex=\"95\" *ngSwitchCase=\"'date'\" (click)=\"picker.open()\"> <input matInput [matDatepicker]=\"picker\" [name]=\"control.name\" [(ngModel)]=\"value[control.name]\" [placeholder]=\"control.label\" readonly> <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle> </mat-form-field> <mat-datepicker #picker (selectedChanged)=\"dateSelect($event,control.name)\"></mat-datepicker> </div> </div> </form> "
            }
          ]
        }
      ],
      "members": {
        "elements": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                },
                "arguments": ["elements"]
              }
            ]
          }
        ],
        "value": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                },
                "arguments": ["value"]
              }
            ]
          }
        ],
        "selected": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                },
                "arguments": ["selected"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              { "__symbolic": "reference", "name": "HttpUtilService" },
              {
                "__symbolic": "reference",
                "name": "DateAdapter",
                "module": "@angular/material",
                "arguments": [
                  {
                    "__symbolic": "reference",
                    "module": "@angular/material",
                    "name": "NativeDateAdapter"
                  }
                ]
              }
            ]
          }
        ],
        "isObject": [{ "__symbolic": "method" }],
        "dateSelect": [{ "__symbolic": "method" }],
        "change": [{ "__symbolic": "method" }],
        "reset": [{ "__symbolic": "method" }]
      }
    },
    "MhCalendarModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "FormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatGridListModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSlideToggleModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatInputModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDatepickerModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCheckboxModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatTooltipModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatMenuModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentPagingModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatListModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSelectModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                }
              ],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµb" },
                { "__symbolic": "reference", "name": "Éµc" },
                { "__symbolic": "reference", "name": "Éµd" },
                { "__symbolic": "reference", "name": "Éµe" }
              ],
              "entryComponents": [
                { "__symbolic": "reference", "name": "Éµd" },
                { "__symbolic": "reference", "name": "Éµe" }
              ],
              "exports": [
                { "__symbolic": "reference", "name": "Éµb" },
                { "__symbolic": "reference", "name": "Éµc" }
              ],
              "providers": [
                { "__symbolic": "reference", "name": "MhCalendarService" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhCalendarService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "openWeekView": [{ "__symbolic": "method" }]
      }
    },
    "MhFileModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "FormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "ng2-file-upload",
                  "name": "FileUploadModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatInputModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatProgressBarModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentFileModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCheckboxModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatListModule"
                }
              ],
              "exports": [],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµf" },
                { "__symbolic": "reference", "name": "Éµg" },
                { "__symbolic": "reference", "name": "Éµh" }
              ],
              "entryComponents": [
                { "__symbolic": "reference", "name": "Éµf" },
                { "__symbolic": "reference", "name": "Éµg" },
                { "__symbolic": "reference", "name": "Éµh" }
              ],
              "providers": [
                { "__symbolic": "reference", "name": "MhFileService" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhFileService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              },
              { "__symbolic": "reference", "name": "HttpService" },
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdLoadingService"
              }
            ]
          }
        ],
        "checkUploadData": [{ "__symbolic": "method" }],
        "upload": [{ "__symbolic": "method" }],
        "import": [{ "__symbolic": "method" }],
        "exportXlsx": [{ "__symbolic": "method" }],
        "exportPDF": [{ "__symbolic": "method" }]
      }
    },
    "MhFormsModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                },
                { "__symbolic": "reference", "name": "MhDynamicFormModule" },
                { "__symbolic": "reference", "name": "MhStepFormModule" },
                { "__symbolic": "reference", "name": "MhSearchFormModule" }
              ],
              "exports": [
                { "__symbolic": "reference", "name": "MhDynamicFormModule" },
                { "__symbolic": "reference", "name": "MhStepFormModule" },
                { "__symbolic": "reference", "name": "MhSearchFormModule" }
              ],
              "providers": [
                { "__symbolic": "reference", "name": "MhFormsService" },
                { "__symbolic": "reference", "name": "ToolService" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhFormsService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "openDynamicForm": [{ "__symbolic": "method" }],
        "openStepForm": [{ "__symbolic": "method" }],
        "openSearchForm": [{ "__symbolic": "method" }]
      }
    },
    "MhDynamicFormModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentCommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "ReactiveFormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatInputModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCheckboxModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSelectModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSliderModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSlideToggleModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatRadioModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentChipsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentPagingModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentSearchModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentDataTableModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentFileModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentVirtualScrollModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatTooltipModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatListModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatLineModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDatepickerModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatNativeDateModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "ng2-dragula",
                  "name": "DragulaModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentExpansionPanelModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSnackBarModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentMessageModule"
                }
              ],
              "exports": [
                [
                  { "__symbolic": "reference", "name": "Éµi" },
                  { "__symbolic": "reference", "name": "Éµn" },
                  { "__symbolic": "reference", "name": "Éµl" },
                  { "__symbolic": "reference", "name": "Éµp" }
                ],
                [
                  {
                    "__symbolic": "reference",
                    "name": "DynamicEntryComponent"
                  },
                  { "__symbolic": "reference", "name": "Éµq" },
                  { "__symbolic": "reference", "name": "Éµs" },
                  { "__symbolic": "reference", "name": "Éµt" },
                  { "__symbolic": "reference", "name": "Éµv" },
                  { "__symbolic": "reference", "name": "Éµx" },
                  { "__symbolic": "reference", "name": "Éµz" },
                  { "__symbolic": "reference", "name": "Éµbb" },
                  { "__symbolic": "reference", "name": "Éµbd" },
                  { "__symbolic": "reference", "name": "Éµbf" },
                  { "__symbolic": "reference", "name": "Éµbh" },
                  { "__symbolic": "reference", "name": "Éµbk" },
                  { "__symbolic": "reference", "name": "Éµbm" },
                  { "__symbolic": "reference", "name": "Éµbo" },
                  { "__symbolic": "reference", "name": "Éµbq" },
                  { "__symbolic": "reference", "name": "Éµbs" },
                  { "__symbolic": "reference", "name": "Éµbu" },
                  { "__symbolic": "reference", "name": "Éµbw" },
                  { "__symbolic": "reference", "name": "Éµby" },
                  { "__symbolic": "reference", "name": "Éµca" },
                  { "__symbolic": "reference", "name": "Éµcc" }
                ]
              ],
              "declarations": [
                [
                  { "__symbolic": "reference", "name": "Éµi" },
                  { "__symbolic": "reference", "name": "Éµn" },
                  { "__symbolic": "reference", "name": "Éµl" },
                  { "__symbolic": "reference", "name": "Éµp" }
                ],
                [
                  {
                    "__symbolic": "reference",
                    "name": "DynamicEntryComponent"
                  },
                  { "__symbolic": "reference", "name": "Éµq" },
                  { "__symbolic": "reference", "name": "Éµs" },
                  { "__symbolic": "reference", "name": "Éµt" },
                  { "__symbolic": "reference", "name": "Éµv" },
                  { "__symbolic": "reference", "name": "Éµx" },
                  { "__symbolic": "reference", "name": "Éµz" },
                  { "__symbolic": "reference", "name": "Éµbb" },
                  { "__symbolic": "reference", "name": "Éµbd" },
                  { "__symbolic": "reference", "name": "Éµbf" },
                  { "__symbolic": "reference", "name": "Éµbh" },
                  { "__symbolic": "reference", "name": "Éµbk" },
                  { "__symbolic": "reference", "name": "Éµbm" },
                  { "__symbolic": "reference", "name": "Éµbo" },
                  { "__symbolic": "reference", "name": "Éµbq" },
                  { "__symbolic": "reference", "name": "Éµbs" },
                  { "__symbolic": "reference", "name": "Éµbu" },
                  { "__symbolic": "reference", "name": "Éµbw" },
                  { "__symbolic": "reference", "name": "Éµby" },
                  { "__symbolic": "reference", "name": "Éµca" },
                  { "__symbolic": "reference", "name": "Éµcc" }
                ],
                { "__symbolic": "reference", "name": "DynamicEntryComponent" }
              ],
              "providers": [
                { "__symbolic": "reference", "name": "Éµj" },
                { "__symbolic": "reference", "name": "Éµk" },
                {
                  "provide": "notify",
                  "useClass": {
                    "__symbolic": "reference",
                    "name": "NotificationService"
                  }
                },
                {
                  "provide": "http",
                  "useClass": {
                    "__symbolic": "reference",
                    "name": "HttpService"
                  }
                },
                {
                  "provide": {
                    "__symbolic": "reference",
                    "module": "@angular/material",
                    "name": "DateAdapter"
                  },
                  "useClass": { "__symbolic": "reference", "name": "Éµbi" }
                }
              ],
              "entryComponents": [
                [
                  {
                    "__symbolic": "reference",
                    "name": "DynamicEntryComponent"
                  },
                  { "__symbolic": "reference", "name": "Éµq" },
                  { "__symbolic": "reference", "name": "Éµs" },
                  { "__symbolic": "reference", "name": "Éµt" },
                  { "__symbolic": "reference", "name": "Éµv" },
                  { "__symbolic": "reference", "name": "Éµx" },
                  { "__symbolic": "reference", "name": "Éµz" },
                  { "__symbolic": "reference", "name": "Éµbb" },
                  { "__symbolic": "reference", "name": "Éµbd" },
                  { "__symbolic": "reference", "name": "Éµbf" },
                  { "__symbolic": "reference", "name": "Éµbh" },
                  { "__symbolic": "reference", "name": "Éµbk" },
                  { "__symbolic": "reference", "name": "Éµbm" },
                  { "__symbolic": "reference", "name": "Éµbo" },
                  { "__symbolic": "reference", "name": "Éµbq" },
                  { "__symbolic": "reference", "name": "Éµbs" },
                  { "__symbolic": "reference", "name": "Éµbu" },
                  { "__symbolic": "reference", "name": "Éµbw" },
                  { "__symbolic": "reference", "name": "Éµby" },
                  { "__symbolic": "reference", "name": "Éµca" },
                  { "__symbolic": "reference", "name": "Éµcc" }
                ]
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhStepFormModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentCommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentStepsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                { "__symbolic": "reference", "name": "MhDynamicFormModule" },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                }
              ],
              "exports": [
                { "__symbolic": "reference", "name": "Éµcd" },
                { "__symbolic": "reference", "name": "StepEntryComponent" }
              ],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµcd" },
                { "__symbolic": "reference", "name": "StepEntryComponent" }
              ],
              "entryComponents": [
                { "__symbolic": "reference", "name": "StepEntryComponent" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhSearchFormModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "FormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCheckboxModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatInputModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSelectModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDatepickerModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                }
              ],
              "exports": [{ "__symbolic": "reference", "name": "Éµa" }],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµa" },
                { "__symbolic": "reference", "name": "SearchEntryComponent" }
              ],
              "entryComponents": [
                { "__symbolic": "reference", "name": "SearchEntryComponent" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhDynamicFormType": {
      "Text": "text",
      "Boolean": "boolean",
      "Number": "number",
      "Date": "date",
      "ENUM": "enum"
    },
    "MhDynamicFormElement": {
      "Input": "input",
      "Time": "time",
      "Number": "number",
      "Password": "password",
      "Textarea": "textarea",
      "Slider": "slider",
      "SlideToggle": "slide-toggle",
      "Checkbox": "checkbox",
      "Select": "select",
      "DatePicker": "date-picker",
      "CheckboxGroup": "checkbox-group",
      "Chips": "chips",
      "Radio": "radio",
      "DialogSelect": "dialog-select",
      "DataForm": "data-form",
      "File": "file",
      "RichEditor": "rich-editor",
      "CodeEditor": "code-editor",
      "CascadSelect": "cascad-select",
      "CascadDialog": "cascad-dialog"
    },
    "MhDynamicFormElementConfig": { "__symbolic": "interface" },
    "DynamicEntryComponent": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-entry",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">{{title}}</div> <mat-dialog-content> <mh-dynamic-form #form [elements]=\"elements\" [default]=\"default\" (change)=\"change($event)\"> </mh-dynamic-form> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button mat-button *ngIf=\"showActions\" [disabled]=\"!form.valid\" (click)=\"save(form.value)\" class=\"btn-blue\">ç¡®å®</button> <button mat-button mat-dialog-close class=\"btn-lightgray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "formRef": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["form"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null,
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [
                  { "__symbolic": "reference", "name": "DynamicEntryComponent" }
                ]
              },
              { "__symbolic": "reference", "name": "ToolService" }
            ]
          }
        ],
        "save": [{ "__symbolic": "method" }],
        "change": [{ "__symbolic": "method" }]
      }
    },
    "ISearchConfig": { "__symbolic": "interface" },
    "SearchEntryComponent": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-search-entry",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">{{title}}</div> <mat-dialog-content> <mh-search-form #form [elements]=\"elements\" [value]=\"default\" (selected)=\"save($event)\"></mh-search-form> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button *ngIf=\"showActions\" mat-button (click)=\"save(form.value)\" class=\"btn-blue\">ç¡®å®</button> <button mat-button mat-dialog-close  class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "formRef": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["form"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [
                  { "__symbolic": "reference", "name": "SearchEntryComponent" }
                ]
              }
            ]
          }
        ],
        "save": [{ "__symbolic": "method" }]
      }
    },
    "StepEntryComponent": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-step-entry",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">{{title}}</div> <mat-dialog-content> <mh-step-form #form [forms]=\"forms\" [mode]=\"'horizontal'\" [default]=\"default\"></mh-step-form> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button *ngIf=\"showActions\" mat-button [disabled]=\"!form.valid\" (click)=\"save(form.value)\" class=\"btn-blue\">ç¡®å®</button> <button mat-button mat-dialog-close class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "formRef": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["form"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [
                  { "__symbolic": "reference", "name": "StepEntryComponent" }
                ]
              }
            ]
          }
        ],
        "save": [{ "__symbolic": "method" }]
      }
    },
    "BaseTable": {
      "__symbolic": "class",
      "members": {
        "pagingBar": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["pagingBar"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDataTableService"
              },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              }
            ]
          }
        ],
        "sort": [{ "__symbolic": "method" }],
        "search": [{ "__symbolic": "method" }],
        "page": [{ "__symbolic": "method" }],
        "filter": [{ "__symbolic": "method" }],
        "detectChanges": [{ "__symbolic": "method" }]
      }
    },
    "TableService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "openTable": [{ "__symbolic": "method" }]
      }
    },
    "MhTableModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentDataTableModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentPagingModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentSearchModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatListModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "FormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSelectModule"
                }
              ],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµce" },
                { "__symbolic": "reference", "name": "Éµcf" }
              ],
              "exports": [{ "__symbolic": "reference", "name": "Éµcf" }],
              "entryComponents": [{ "__symbolic": "reference", "name": "Éµce" }],
              "providers": [
                { "__symbolic": "reference", "name": "TableService" }
              ]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhTaskModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/forms",
                  "name": "FormsModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCardModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatButtonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatDialogModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentDataTableModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentSearchModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentPagingModule"
                },
                { "__symbolic": "reference", "name": "MhFormsModule" },
                { "__symbolic": "reference", "name": "MhServicesModule" },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSelectModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatListModule"
                }
              ],
              "declarations": [
                { "__symbolic": "reference", "name": "Éµcg" },
                { "__symbolic": "reference", "name": "Éµci" }
              ],
              "exports": [{ "__symbolic": "reference", "name": "Éµcg" }],
              "providers": [{ "__symbolic": "reference", "name": "Éµch" }]
            }
          ]
        }
      ],
      "members": {}
    },
    "MhTreeViewModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/common",
                  "name": "CommonModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "angular-tree-component",
                  "name": "TreeModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatIconModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatCheckboxModule"
                }
              ],
              "exports": [{ "__symbolic": "reference", "name": "Éµcj" }],
              "declarations": [{ "__symbolic": "reference", "name": "Éµcj" }]
            }
          ]
        }
      ],
      "members": {}
    },
    "HttpService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": ["api"]
                }
              ]
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/http",
                "name": "Http"
              },
              { "__symbolic": "reference", "name": "NotificationService" },
              { "__symbolic": "reference", "name": "string" }
            ]
          }
        ],
        "get": [{ "__symbolic": "method" }],
        "post": [{ "__symbolic": "method" }],
        "put": [{ "__symbolic": "method" }],
        "patch": [{ "__symbolic": "method" }],
        "delete": [{ "__symbolic": "method" }],
        "download": [{ "__symbolic": "method" }],
        "getTimestampUrl": [{ "__symbolic": "method" }]
      }
    },
    "HttpUtilService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [{ "__symbolic": "reference", "name": "HttpService" }]
          }
        ],
        "getTableData": [{ "__symbolic": "method" }],
        "getDictionaryData": [{ "__symbolic": "method" }],
        "genTemplate": [{ "__symbolic": "method" }],
        "startProcess": [{ "__symbolic": "method" }],
        "completeTask": [{ "__symbolic": "method" }],
        "addSubOrganization": [{ "__symbolic": "method" }]
      }
    },
    "NotificationService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatSnackBar"
              },
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDialogService"
              }
            ]
          }
        ],
        "success": [{ "__symbolic": "method" }],
        "error": [{ "__symbolic": "method" }],
        "warn": [{ "__symbolic": "method" }],
        "info": [{ "__symbolic": "method" }],
        "confirmDelete": [{ "__symbolic": "method" }],
        "confirm": [{ "__symbolic": "method" }],
        "prompt": [{ "__symbolic": "method" }],
        "notify": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }]
      }
    },
    "ToolService": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "filterField": [{ "__symbolic": "method" }],
        "encodeString": [{ "__symbolic": "method" }],
        "decodeString": [{ "__symbolic": "method" }]
      }
    },
    "MhServicesModule": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "NgModule"
          },
          "arguments": [
            {
              "imports": [
                {
                  "__symbolic": "reference",
                  "module": "@angular/http",
                  "name": "HttpModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@angular/material",
                  "name": "MatSnackBarModule"
                },
                {
                  "__symbolic": "reference",
                  "module": "@covalent/core",
                  "name": "CovalentDialogsModule"
                }
              ]
            }
          ]
        }
      ],
      "members": {},
      "statics": {
        "forRoot": {
          "__symbolic": "function",
          "parameters": ["getApi"],
          "value": {
            "ngModule": {
              "__symbolic": "reference",
              "name": "MhServicesModule"
            },
            "providers": [
              {
                "provide": "api",
                "useFactory": { "__symbolic": "reference", "name": "getApi" }
              },
              { "__symbolic": "reference", "name": "HttpService" },
              { "__symbolic": "reference", "name": "HttpUtilService" },
              { "__symbolic": "reference", "name": "NotificationService" },
              { "__symbolic": "reference", "name": "ToolService" }
            ]
          }
        }
      }
    },
    "Éµb": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-month-view",
              "template":
                "<div layout=\"column\" style=\"margin:0 10px 10px 10px\"> <div flex layout=\"row\" layout-margin> <div layout=\"row\" layout-margin layout-align=\"center center\"> <button flex mat-icon-button matTooltip=\"ä¸ä¸æ\" matTooltipPosition=\"above\" (click)=\"preMonth()\"> <mat-icon>chevron_left</mat-icon> </button> <mat-form-field (click)=\"picker.open()\" style=\"margin-left:20px\"> <input matInput [matDatepicker]=\"picker\" placeholder=\"éæ©æä»½\" readonly [value]=\"viewDate\"> <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle> </mat-form-field> <mat-datepicker #picker startView=\"year\" [startAt]=\"viewDate\" (selectedChanged)=\"change($event)\"></mat-datepicker> <button flex mat-icon-button matTooltip=\"ä¸ä¸æ\" matTooltipPosition=\"above\" (click)=\"nextMonth()\"> <mat-icon>chevron_right</mat-icon> </button> </div> <span flex></span> <button mat-button (click)=\"enabledMonth()\"> <mat-icon color=\"accent\">camera</mat-icon>å¯ç¨æ¬æ </button> <button mat-button (click)=\"disabledMonth()\"> <mat-icon color=\"warn\">block</mat-icon>å³é­æ¬æ </button> <span flex></span> <div layout=\"row\" layout-margin layout-align=\"center center\"> <ng-template ngFor [ngForOf]=\"STATUS\" let-s> <div style=\"width:20px;height:20px;margin:0 10px\" [style.background]=\"color[s.key]\"></div>{{s.value}} </ng-template> </div> </div> <mat-grid-list flex cols=\"8\" rowHeight=\"40px\" class=\"calendar-title\"> <mat-grid-tile colspan=\"1\" rowspan=\"1\" [style.background]=\"columnBgColor\" [style.color]=\"columnColor\">æ¶é´æ®µ</mat-grid-tile> <mat-grid-tile *ngFor=\"let w of WEEK\" colspan=\"1\" rowspan=\"1\" [style.background]=\"columnBgColor\" [style.color]=\"columnColor\">{{w}}</mat-grid-tile> </mat-grid-list> <mat-divider></mat-divider> <div flex class=\"calendar-body\"> <mat-grid-list flex cols=\"8\" rowHeight=\"30px\"> <ng-template ngFor [ngForOf]=\"days\" let-d let-index=\"index\"> <mat-grid-tile *ngIf=\"index%7===0\" colspan=\"1\" rowspan=\"1\" [style.background]=\"rowHeadBgColor\" [style.color]=\"rowHeadColor\">{{TIME[0]?.value}}</mat-grid-tile> <mat-grid-tile colspan=\"1\" [rowspan]=\"TIME.length\"> <div *ngIf=\"index<viewStart || index>viewEnd\" style=\"width:100%;height:100%\" [style.background]=\"disabledCellBgColor\" [style.color]=\"disabledCellColor\" layout=\"row\" layout-align=\"center center\"> <div flex=\"45\"></div> <span flex>{{d}}</span> <div flex=\"45\"></div> </div> <!-- <mat-menu #menu=\"matMenu\"> <button mat-menu-item *ngFor=\"let m of getMenu(index, x)\" (click)=\"changeStatus(index, x, m.key)\">{{m.label}}</button> </mat-menu> --> <div *ngIf=\"index>=viewStart && index<=viewEnd\" class=\"column\"> <ng-template ngFor [ngForOf]=\"TIME\" let-time let-x=\"index\"> <button flex style=\"line-height:30px;width:100%\" [ngStyle]=\"{'border-top':x===0?'solid white 2px':'solid white 1px'}\" mat-button [style.background]=\"getColor(index, x)\" [matTooltip]=\"getTooltip(index, x)\" (click)=\"openConfim(index, x)\" matTooltipPosition=\"above\"> <span *ngIf=\"x===1\">{{d}}</span> <mat-icon *ngIf=\"x!==1\"></mat-icon> </button> </ng-template> </div> </mat-grid-tile> <ng-template *ngIf=\"(index+1)%7===0\" ngFor [ngForOf]=\"TIME\" let-t let-i=\"index\"> <mat-grid-tile *ngIf=\"!(i===0)\" colspan=\"1\" rowspan=\"1\" [style.background]=\"rowHeadBgColor\" [style.color]=\"rowHeadColor\">{{t.value}}</mat-grid-tile> </ng-template> </ng-template> </mat-grid-list> </div> </div> ",
              "changeDetection": {
                "__symbolic": "select",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ChangeDetectionStrategy"
                },
                "member": "OnPush"
              }
            }
          ]
        }
      ],
      "members": {
        "viewDate": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "events": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "selectEvent": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                }
              }
            ]
          }
        ],
        "monthStatus": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                }
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              { "__symbolic": "reference", "name": "HttpUtilService" },
              { "__symbolic": "reference", "name": "NotificationService" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              },
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              },
              {
                "__symbolic": "reference",
                "name": "DateAdapter",
                "module": "@angular/material",
                "arguments": [
                  {
                    "__symbolic": "reference",
                    "module": "@angular/material",
                    "name": "NativeDateAdapter"
                  }
                ]
              }
            ]
          }
        ],
        "detectChanges": [{ "__symbolic": "method" }],
        "init": [{ "__symbolic": "method" }],
        "change": [{ "__symbolic": "method" }],
        "preMonth": [{ "__symbolic": "method" }],
        "nextMonth": [{ "__symbolic": "method" }],
        "convertEvent": [{ "__symbolic": "method" }],
        "findDateIndex": [{ "__symbolic": "method" }],
        "findTimeIndex": [{ "__symbolic": "method" }],
        "getColor": [{ "__symbolic": "method" }],
        "getTooltip": [{ "__symbolic": "method" }],
        "getMenu": [{ "__symbolic": "method" }],
        "openConfim": [{ "__symbolic": "method" }],
        "changeStatus": [{ "__symbolic": "method" }],
        "enabledMonth": [{ "__symbolic": "method" }],
        "disabledMonth": [{ "__symbolic": "method" }]
      }
    },
    "Éµc": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-week-view",
              "template":
                "<div layout=\"column\" style=\"margin:0 10px 10px 10px\"> <div flex layout=\"row\" layout-margin> <div layout=\"row\" layout-margin layout-align=\"center center\"> <button flex mat-icon-button matTooltip=\"ä¸ä¸å¨\" matTooltipPosition=\"above\" (click)=\"preWeek()\"><mat-icon>chevron_left</mat-icon></button> <mat-form-field (click)=\"picker.open()\" style=\"margin-left:20px\"> <input matInput [matDatepicker]=\"picker\" placeholder=\"éæ©æ¥æ\" readonly [value]=\"viewDate\"> <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle> </mat-form-field> <mat-datepicker #picker [startAt]=\"viewDate\" (selectedChanged)=\"dateChange($event)\"></mat-datepicker> <button flex mat-icon-button matTooltip=\"ä¸ä¸å¨\" matTooltipPosition=\"above\" (click)=\"nextWeek()\"><mat-icon>chevron_right</mat-icon></button> </div> <span flex></span> <div layout=\"row\" layout-margin layout-align=\"center center\"> <ng-template ngFor [ngForOf]=\"STATUS\" let-s> <div style=\"width:20px;height:20px;margin:0 10px\" [style.background]=\"color[s.key]\"></div>{{s.value}} </ng-template> </div> </div> <mat-grid-list [cols]=\"cols\" rowHeight=\"40px\"> <mat-grid-tile [colspan]=\"TIME.length\" rowspan=\"1\" [style.background]=\"headBgColor\" [style.color]=\"headColor\"></mat-grid-tile> <mat-grid-tile *ngFor=\"let day of days\" [colspan]=\"TIME.length\" rowspan=\"1\" [style.background]=\"headBgColor\" [style.color]=\"headColor\"> {{day.date}} </mat-grid-tile> </mat-grid-list> <mat-divider></mat-divider> <mat-grid-list [cols]=\"cols\" rowHeight=\"30px\"> <mat-grid-tile [colspan]=\"TIME.length\" rowspan=\"1\" [style.background]=\"subBgColor\" [style.color]=\"subColor\"></mat-grid-tile> <ng-template ngFor [ngForOf]=\"days\" let-day> <mat-grid-tile *ngFor=\"let time of TIME;let i=index\" colspan=\"1\" rowspan=\"1\" [style.background]=\"subBgColor\" [style.color]=\"subColor\"> {{TIME[i].value}} </mat-grid-tile> </ng-template> </mat-grid-list> <mat-divider></mat-divider> <ng-template *ngIf=\"places.length > 0\" ngFor [ngForOf]=\"filteredData\" let-item let-index=\"index\" let-last=\"last\"> <mat-grid-list [cols]=\"cols\" rowHeight=\"50px\"> <mat-grid-tile [colspan]=\"TIME.length\" rowspan=\"1\" [matTooltip]=\"getTooltip(index)\" matTooltipPosition=\"above\" [style.background]=\"rowHeadBgColor\" [style.color]=\"rowHeadColor\">{{item.ddPlace}}</mat-grid-tile> <ng-template ngFor [ngForOf]=\"days\" let-day let-ind=\"index\"> <mat-grid-tile *ngFor=\"let t of TIME;let i=index\" colspan=\"1\" rowspan=\"1\" [style.background]=\"getColor(index, ind ,i)\"> <button mat-button flex style=\"width:100%;height:100%\" [disabled]=\"getColor(index, ind ,i)!==color.enabled\" (click)=\"apply(index, ind ,i)\"></button> </mat-grid-tile> </ng-template> </mat-grid-list> <mat-divider></mat-divider> </ng-template> <div *ngIf=\"places.length <= 0\" layout=\"row\" layout-align=\"center center\"><h3>ææ åºå°</h3></div> <td-paging-bar #pagingBar [total]=\"filteredTotal\" [pageSize]=\"pageSize\" (change)=\"page($event)\"> <span td-paging-bar-label hide-xs>æ¯è¡æ¾ç¤º:</span> <mat-select [style.width.px]=\"50\" [(ngModel)]=\"pageSize\"> <mat-option *ngFor=\"let size of [5,10,15,20,50]\" [value]=\"size\"> {{size}} </mat-option> </mat-select> <span>{{'ç¬¬ '+pagingBar.range+' æ¡   å± '+pagingBar.total+' æ¡'}}</span> </td-paging-bar> </div> ",
              "changeDetection": {
                "__symbolic": "select",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ChangeDetectionStrategy"
                },
                "member": "OnPush"
              }
            }
          ]
        }
      ],
      "members": {
        "ddCampus": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "select": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                }
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDataTableService"
              },
              { "__symbolic": "reference", "name": "HttpUtilService" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              },
              {
                "__symbolic": "reference",
                "name": "DateAdapter",
                "module": "@angular/material",
                "arguments": [
                  {
                    "__symbolic": "reference",
                    "module": "@angular/material",
                    "name": "NativeDateAdapter"
                  }
                ]
              }
            ]
          }
        ],
        "detectChanges": [{ "__symbolic": "method" }],
        "ngOnInit": [{ "__symbolic": "method" }],
        "init": [{ "__symbolic": "method" }],
        "dateChange": [{ "__symbolic": "method" }],
        "preWeek": [{ "__symbolic": "method" }],
        "nextWeek": [{ "__symbolic": "method" }],
        "page": [{ "__symbolic": "method" }],
        "filter": [{ "__symbolic": "method" }],
        "initMap": [{ "__symbolic": "method" }],
        "findRowIndex": [{ "__symbolic": "method" }],
        "findDateIndex": [{ "__symbolic": "method" }],
        "findTimeIndex": [{ "__symbolic": "method" }],
        "getColor": [{ "__symbolic": "method" }],
        "getTooltip": [{ "__symbolic": "method" }],
        "apply": [{ "__symbolic": "method" }]
      }
    },
    "Éµd": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-week-entry",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">{{title}}</div> <mat-dialog-content> <mh-week-view [ddCampus]=\"ddCampus\" (select)=\"save($event)\"></mh-week-view> </mat-dialog-content> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµd" }]
              }
            ]
          }
        ],
        "save": [{ "__symbolic": "method" }]
      }
    },
    "Éµe": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-confirm-entry",
              "template":
                "<mat-dialog-content class=\"push-bottom-sm\"> <span>è¯·éæ©è¦è¿è¡çæä½</span> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <div layout=\"row\"> <button flex mat-button mat-dialog-close>åæ¶</button> <button flex mat-button *ngFor=\"let btn of actions\" (click)=\"close(btn.key)\" color=\"accent\">{{btn.label}}</button> </div> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµe" }]
              }
            ]
          }
        ],
        "close": [{ "__symbolic": "method" }]
      }
    },
    "Éµf": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-upload-dialog",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">æä»¶ä¸ä¼ </div> <mat-dialog-content> <p class=\"push-sm\">æ£æµå°{{' '+uploader.queue.length+' '}}ä¸ªå¾ä¸ä¼ çæä»¶ï¼è¯·ä¸ä¼ åç»§ç»­æä½</p> <mat-list dense> <mat-list-item *ngFor=\"let item of uploader.queue\"> <div layout=\"row\" layout-align=\"start center\"> <span flex=\"40\">{{ item?.file?.name }}</span> <span flex=\"15\">{{ item?.file?.size/1024/1024 | number:'.2' }} MB</span> <mat-progress-bar flex=\"35\" color=\"primary\" mode=\"buffer\" buffer=\"0\" [value]=\"item.progress\"> </mat-progress-bar> <span flex=\"8\" [ngSwitch]=\"item.progress\" class=\"push-left-xs\"> <mat-icon *ngSwitchCase=\"0\" color=\"primary\">remove</mat-icon> <mat-icon *ngSwitchCase=\"100\" color=\"accent\">check</mat-icon> <span *ngSwitchDefault>{{item.progress+' %'}}</span> </span> </div> </mat-list-item> </mat-list> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button mat-button (click)=\"startUpload()\" [disabled]=\"!buttonEnabled\" class=\"btn-green\">{{text}}</button> <button mat-button mat-dialog-close [disabled]=\"!buttonEnabled\" class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ]
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "HttpService" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµf" }]
              },
              { "__symbolic": "reference", "name": "any" }
            ]
          }
        ],
        "startUpload": [{ "__symbolic": "method" }]
      }
    },
    "Éµg": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-import-dialog",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">æ°æ®å¯¼å¥</div> <mat-dialog-content> <div layout=\"row\"> <mat-form-field flex=\"45\" tdFileDrop (fileDrop)=\"file = $event\" (click)=\"fileInput.inputElement.click()\" flex> <input matInput placeholder=\"è¯·éæ©æ¨¡æ¿æä»¶\" [value]=\"file?.name\" readonly /> </mat-form-field> <button mat-icon-button *ngIf=\"file\" (click)=\"fileInput.clear();clear()\"> <mat-icon color=\"warn\">cancel</mat-icon> </button> <td-file-input class=\"push-left-xs push-right-xs\" #fileInput [(ngModel)]=\"file\" [accept]=\"accept\" (select)=\"select($event)\"> <mat-icon color=\"accent\">folder</mat-icon> <span class=\"text-upper\">éæ©æä»¶</span> </td-file-input> </div> <!-- æä»¶ä¸ä¼ List --> <mat-list dense> <mat-list-item *ngFor=\"let item of uploader.queue\"> <div layout=\"row\" layout-align=\"start center\"> <span flex=\"40\">{{ item?.file?.name }}</span> <span flex=\"15\">{{ item?.file?.size/1024/1024 | number:'.2' }} MB</span> <mat-progress-bar flex=\"35\" color=\"primary\" mode=\"buffer\" buffer=\"0\" [value]=\"item.progress\"> </mat-progress-bar> <span flex=\"8\" [ngSwitch]=\"item.progress\" class=\"push-left-xs\"> <mat-icon *ngSwitchCase=\"0\" color=\"primary\">remove</mat-icon> <mat-icon *ngSwitchCase=\"100\" color=\"accent\">check</mat-icon> <span *ngSwitchDefault>{{item.progress+' %'}}</span> </span> </div> </mat-list-item> </mat-list> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button mat-button (click)=\"startUpload()\" [disabled]=\"!buttonEnabled || !file\" class=\"btn-green\">{{text}}</button> <button mat-button mat-dialog-close [disabled]=\"!buttonEnabled\" class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "fileInput": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["fileInput"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ]
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "HttpService" },
              { "__symbolic": "reference", "name": "NotificationService" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµg" }]
              },
              { "__symbolic": "reference", "name": "any" }
            ]
          }
        ],
        "select": [{ "__symbolic": "method" }],
        "clear": [{ "__symbolic": "method" }],
        "startUpload": [{ "__symbolic": "method" }]
      }
    },
    "Éµh": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-export-dialog",
              "template":
                "<div style=\"font-size: 15px;margin-bottom:15px\">æ°æ®å¯¼åº</div> <mat-dialog-content> <p>å³å°å¯¼åº {{data.length}} æ¡æ°æ®</p> <p>è¯·éæ©å¯¼åºå <mat-checkbox name=\"check\" [(ngModel)]=\"checkedAll\" (change)=\"selectedAll()\">å¨é</mat-checkbox> </p> <div layout=\"row\" layout-wrap> <div *ngFor=\"let col of columns;let index=index\" flex-xs=\"25\" flex-gt-xs=\"15\" layout=\"row\"> <mat-checkbox flex=\"95\" (change)=\"change(index)\" [(ngModel)]=\"value[index]\" [name]=\"col.name\"> {{col.label}} </mat-checkbox> </div> </div> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button mat-button (click)=\"export()\" class=\"btn-green\">ç¡®å®</button> <button mat-button mat-dialog-close  class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ]
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "NotificationService" },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµh" }]
              },
              { "__symbolic": "reference", "name": "any" }
            ]
          }
        ],
        "change": [{ "__symbolic": "method" }],
        "selectedAll": [{ "__symbolic": "method" }],
        "export": [{ "__symbolic": "method" }]
      }
    },
    "Éµi": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-form",
              "template":
                "<form [formGroup]=\"dynamicForm\" novalidate> <div layout=\"row\" layout-wrap layout-margin layout-align=\"start center\"> <td-message *ngIf=\"hasError\" flex=\"100\" label=\"éè¯¯!\" [sublabel]=\"errorInfo\" color=\"warn\" icon=\"error\"></td-message> <ng-template let-element ngFor [ngForOf]=\"elements\"> <mh-dynamic-element flex-xs=\"100\" [formControlName]=\"element.name\" [dynamicControl]=\"dynamicForm.controls[element.name]\" [id]=\"element.name\" [label]=\"element.label || element.name\" [type]=\"element.type\" [required]=\"element.required\" [readonly]=\"element.readonly\" [min]=\"element.min\" [max]=\"element.max\" [selections]=\"element.selections\" [pattern]=\"element.pattern\" [config]=\"element.config\" [maxlength]=\"element.maxlength\" [flex]=\"element.flex\" [controls]=\"element.controls\" [multiple]=\"element.multiple\"> </mh-dynamic-element> </ng-template> <ng-content></ng-content> </div> </form> "
            }
          ]
        }
      ],
      "members": {
        "elements": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                },
                "arguments": ["elements"]
              }
            ]
          }
        ],
        "default": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                },
                "arguments": ["default"]
              }
            ]
          }
        ],
        "change": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                },
                "arguments": ["change"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/forms",
                "name": "FormBuilder"
              },
              { "__symbolic": "reference", "name": "Éµj" },
              { "__symbolic": "reference", "name": "Éµk" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              }
            ]
          }
        ],
        "refresh": [{ "__symbolic": "method" }],
        "init": [{ "__symbolic": "method" }],
        "_loaderElements": [{ "__symbolic": "method" }],
        "_rerenderElements": [{ "__symbolic": "method" }],
        "_clearRemovedElements": [{ "__symbolic": "method" }],
        "setValue": [{ "__symbolic": "method" }],
        "validateAsync": [{ "__symbolic": "method" }],
        "detectChanges": [{ "__symbolic": "method" }]
      }
    },
    "Éµj": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [{ "__symbolic": "reference", "name": "Éµk" }]
          }
        ],
        "registerChange": [{ "__symbolic": "method" }],
        "validateDynamicElementName": [{ "__symbolic": "method" }],
        "getDynamicElement": [{ "__symbolic": "method" }],
        "getDefaultElementFlex": [{ "__symbolic": "method" }],
        "createFormControl": [{ "__symbolic": "method" }],
        "createValidators": [{ "__symbolic": "method" }],
        "asyncValidator": [{ "__symbolic": "method" }]
      }
    },
    "Éµk": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": ["http"]
                }
              ]
            ],
            "parameters": [{ "__symbolic": "reference", "name": "any" }]
          }
        ],
        "loadElements": [{ "__symbolic": "method" }],
        "loadOptions": [{ "__symbolic": "method" }],
        "loadSelections": [{ "__symbolic": "method" }],
        "loadControls": [{ "__symbolic": "method" }],
        "loadFiles": [{ "__symbolic": "method" }],
        "download": [{ "__symbolic": "method" }],
        "validate": [{ "__symbolic": "method" }]
      }
    },
    "Éµl": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Directive"
          },
          "arguments": [{ "selector": "[mhDynamicContainer]" }]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ViewContainerRef"
              }
            ]
          }
        ]
      }
    },
    "Éµm": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµn" },
      "multi": true
    },
    "Éµn": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "providers": [
                { "__symbolic": "reference", "name": "Éµj" },
                { "__symbolic": "reference", "name": "Éµm" }
              ],
              "selector": "mh-dynamic-element",
              "template": "<div mhDynamicContainer></div>"
            }
          ]
        }
      ],
      "members": {
        "dynamicControl": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "label": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "type": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "required": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "readonly": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "min": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "max": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "selections": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "pattern": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "config": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "multiple": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "maxlength": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "selectionParams": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "controls": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "childElement": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": [{ "__symbolic": "reference", "name": "Éµl" }]
              }
            ]
          }
        ],
        "flex": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              },
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "HostBinding"
                },
                "arguments": ["attr.flex"]
              }
            ]
          }
        ],
        "maxAttr": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "HostBinding"
                },
                "arguments": ["attr.max"]
              }
            ]
          }
        ],
        "minAttr": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "HostBinding"
                },
                "arguments": ["attr.min"]
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ComponentFactoryResolver"
              },
              { "__symbolic": "reference", "name": "Éµj" }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "registerOnModelChange": [{ "__symbolic": "method" }]
      }
    },
    "Éµo": {
      "__symbolic": "class",
      "members": {
        "writeValue": [{ "__symbolic": "method" }],
        "registerOnChange": [{ "__symbolic": "method" }],
        "registerOnTouched": [{ "__symbolic": "method" }]
      }
    },
    "Éµp": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-form-design",
              "template":
                "<div layout=\"row\"> <div flex=\"20\"> <td-expansion-panel label=\"æ§ä»¶\" [expand]=\"true\"> <mat-nav-list [dragula]=\"bagName\" [dragulaModel]=\"controls\" [dragulaOptions]=\"dragOpt\"> <mat-list-item *ngFor=\"let control of controls\" [id]=\"control.name\"> <mat-icon>call_made</mat-icon><span>{{control.label}}</span> </mat-list-item> </mat-nav-list> </td-expansion-panel> </div> <div flex=\"60\"> <td-expansion-panel label=\"è¡¨åé¢æ¿\" [expand]=\"true\"> <div style=\"min-height:300px\" layout=\"row\" layout-wrap layout-margin layout-align=\"start center\" [dragula]=\"bagName\" [dragulaOptions]=\"dragOpt\" [dragulaModel]=\"elements\"> <div *ngFor=\"let element of elements\" [ngSwitch]=\"element.type\" [attr.flex]=\"element.flex\" (click)=\"elementClick(element)\" [attr.name]=\"element.name\"> <mat-form-field *ngSwitchCase=\"'number'\"> <input matInput [(ngModel)]=\"element.default\" [placeholder]=\"element.label\" [type]=\"element.type\" [required]=\"element.required\" [min]=\"element.min\" [max]=\"element.max\" [pattern]=\"element.pattern\" [maxlength]=\"element.maxlength\"> <mat-hint *ngIf=\"element.maxlength\" align=\"end\">{{element.default?.length}} / {{element.maxlength}}</mat-hint> </mat-form-field> <mat-form-field *ngSwitchCase=\"'input'\"> <input matInput [(ngModel)]=\"element.default\" [placeholder]=\"element.label\" [type]=\"element.type\" [required]=\"element.required\" [min]=\"element.min\" [max]=\"element.max\" [pattern]=\"element.pattern\" [maxlength]=\"element.maxlength\"> <mat-hint *ngIf=\"element.maxlength\" align=\"end\">{{element.default?.length}} / {{element.maxlength}}</mat-hint> </mat-form-field> <mat-form-field *ngSwitchCase=\"'password'\"> <input matInput [(ngModel)]=\"element.default\" [placeholder]=\"element.label\" [type]=\"element.type\" [required]=\"element.required\" [min]=\"element.min\" [max]=\"element.max\" [pattern]=\"element.pattern\" [maxlength]=\"element.maxlength\"> <mat-hint *ngIf=\"element.maxlength\" align=\"end\">{{element.default?.length}} / {{element.maxlength}}</mat-hint> </mat-form-field> <mat-form-field *ngSwitchCase=\"'textarea'\"> <textarea matInput rows=\"4\" [(ngModel)]=\"element.default\" [placeholder]=\"element.label\" [required]=\"element.required\" [pattern]=\"element.pattern\" [maxlength]=\"element.maxlength\"></textarea> <mat-hint *ngIf=\"element.maxlength\" align=\"end\">{{element.default?.length}} / {{element.maxlength}}</mat-hint> </mat-form-field> <div *ngSwitchCase=\"'slider'\" class=\"relative push-top\"> <label class=\"mat-input-placeholder mat-float td-slider-label\" [class.mat-focused]=\"slider._isActive\"> {{element.label}} <span *ngIf=\"element.required\" class=\"mat-placeholder-required\">*</span></label> <mat-slider #slider [(ngModel)]=\"element.default\" thumbLabel tickInterval=\"auto\" [required]=\"element.required\" [min]=\"element.min\" [max]=\"element.max\" [maxlength]=\"element.maxlength\"> </mat-slider> </div> <mat-form-field *ngSwitchCase=\"'date-picker'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" type=\"text\" [required]=\"element.required\"> </mat-form-field> <div *ngSwitchCase=\"'slide-toggle'\"> <mat-slide-toggle [(ngModel)]=\"element.default\" [required]=\"element.required\"> {{element.label}} </mat-slide-toggle> </div> <div *ngSwitchCase=\"'checkbox'\"> <mat-checkbox [(ngModel)]=\"element.default\" [required]=\"element.required\"> {{element.label}} </mat-checkbox> </div> <div *ngSwitchCase=\"'checkbox-group'\"> <label>{{element.label+' (é¢è§æ¥ç)'}}</label> </div> <mat-form-field *ngSwitchCase=\"'select'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" [type]=\"element.type\" [required]=\"element.required\"> </mat-form-field> <mat-form-field *ngSwitchCase=\"'chips'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" [type]=\"element.type\" [required]=\"element.required\"> </mat-form-field> <div *ngSwitchCase=\"'radio'\"> <label>{{element.label+' (é¢è§æ¥ç)'}}</label> </div> <mat-form-field *ngSwitchCase=\"'dialog-select'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" [type]=\"element.type\" [required]=\"element.required\"> </mat-form-field> <mat-form-field *ngSwitchCase=\"'data-form'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" [type]=\"element.type\" [required]=\"element.required\"> </mat-form-field> <mat-form-field *ngSwitchCase=\"'file'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" type=\"text\" [required]=\"element.required\"> </mat-form-field> <mat-form-field *ngSwitchCase=\"'cascad-select'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" type=\"text\" [required]=\"element.required\"> </mat-form-field> <mat-form-field *ngSwitchCase=\"'rich-editor'\"> <input matInput readonly [(ngModel)]=\"element.default\" [placeholder]=\"element.label+' (é¢è§æ¥ç)'\" type=\"text\" [required]=\"element.required\"> </mat-form-field> </div> <div [attr.name]=\"h3Name\" flex=\"100\" *ngIf=\"elements.length === 0\" layout=\"row\" layout-align=\"center center\"> <h3>è¯·å°æ§ä»¶ææ¾è³æ­¤åºå</h3> </div> </div> </td-expansion-panel> </div> <div flex=\"20\"> <td-expansion-panel label=\"å±æ§\" [expand]=\"true\"> <form #panelForm=\"ngForm\" *ngIf=\"selectedindex >= 0\"> <div layout=\"row\" layout-wrap layout-margin> <mat-form-field flex=\"100\"> <input matInput type=\"text\" name=\"name\" placeholder=\"æ§ä»¶æ è¯\" [(ngModel)]=\"elements[selectedindex].name\" required> </mat-form-field> <mat-form-field flex=\"100\"> <input matInput type=\"text\" name=\"label\" placeholder=\"æ§ä»¶åç§°\" [(ngModel)]=\"elements[selectedindex].label\" required> </mat-form-field> <mat-form-field flex=\"100\"> <input matInput type=\"text\" name=\"type\" placeholder=\"æ§ä»¶ç±»å\" [(ngModel)]=\"elements[selectedindex].type\" required> </mat-form-field> <mat-form-field flex=\"100\"> <input matInput type=\"number\" name=\"flex\" placeholder=\"æ§ä»¶å®½åº¦(%)\" [(ngModel)]=\"elements[selectedindex].flex\" required> </mat-form-field> <mat-form-field flex=\"100\"> <input matInput type=\"text\" name=\"validateUrl\" placeholder=\"æ ¡éªURL\" [matTooltip]=\"'è¯·æ±æ¹å¼:post; body:{value:??}; é¢å¤åæ°ä½¿ç¨query'\" [(ngModel)]=\"elements[selectedindex].validateUrl\"> </mat-form-field> <mat-checkbox flex=\"100\" name=\"required\" [(ngModel)]=\"elements[selectedindex].required\"> <span>æ¯å¦å¿å¡«</span> </mat-checkbox> <mat-checkbox flex=\"100\" *ngIf=\"checkMultiple(elements[selectedindex].type)\" name=\"multiple\" [(ngModel)]=\"elements[selectedindex].multiple\"> <span>æ¯å¦åè®¸å¤é</span> </mat-checkbox> <mat-form-field flex=\"100\" *ngIf=\"checkDefault(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"default\" placeholder=\"é»è®¤å¼\" [(ngModel)]=\"elements[selectedindex].default\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkMaxlength(elements[selectedindex].type)\"> <input matInput type=\"number\" name=\"maxlength\" [placeholder]=\"elements[selectedindex].type == 'file'?'æä»¶æå¤§å°ºå¯¸':'æå¤§é¿åº¦'\" [(ngModel)]=\"elements[selectedindex].maxlength\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkMinMax(elements[selectedindex].type)\"> <input matInput type=\"number\" name=\"min\" placeholder=\"æå°å¼\" [(ngModel)]=\"elements[selectedindex].min\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkMinMax(elements[selectedindex].type)\"> <input matInput type=\"number\" name=\"max\" placeholder=\"æå¤§å¼\" [(ngModel)]=\"elements[selectedindex].max\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkPattern(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"pattern\" placeholder=\"æ­£åéªè¯\" [(ngModel)]=\"elements[selectedindex].pattern\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkControls(elements[selectedindex].type)\" (click)=\"open('dataform','controls')\"> <input matInput readonly type=\"text\" name=\"controls\" placeholder=\"æ°æ®è¡¨å\" [(ngModel)]=\"elements[selectedindex].controls\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkDatasource(elements[selectedindex].type)\" (click)=\"open('datasource','selections')\"> <input matInput readonly type=\"text\" name=\"selections\" placeholder=\"æ°æ®æº\" [(ngModel)]=\"elements[selectedindex].selections\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkDictionary(elements[selectedindex].type)\" (click)=\"open('dictionary','selections')\"> <input matInput readonly type=\"text\" name=\"selections\" placeholder=\"æ°æ®å­å¸\" [(ngModel)]=\"elements[selectedindex].selections\"> </mat-form-field> <mat-checkbox flex=\"100\" *ngIf=\"checkControls(elements[selectedindex].type)\" name=\"stateMode\" [(ngModel)]=\"elements[selectedindex].config.stateMode\"> <span>æ°æ®æ¯å¦å«ç¶æ</span> </mat-checkbox> <mat-form-field flex=\"100\" *ngIf=\"checkPattern(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"config\" placeholder=\"æ­£åéè¯¯æç¤º\" [(ngModel)]=\"elements[selectedindex].config.patternErrors\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkSelectFIeld(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"showField\" placeholder=\"æ¾ç¤ºå­æ®µå\" matTooltip=\"éä¸[å¼å­æ®µå]åæ¶è®¾ç½®å¹¶ä¸éå¤éæçæ\" [(ngModel)]=\"elements[selectedindex].config.showField\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkSelectFIeld(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"valueField\" placeholder=\"å¼å­æ®µå\" matTooltip=\"éä¸[æ¾ç¤ºå­æ®µå]åæ¶è®¾ç½®å¹¶ä¸éå¤éæçæ\" [(ngModel)]=\"elements[selectedindex].config.valueField\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkEntryWidth(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"width\" placeholder=\"å¼¹çªå®½åº¦(%)\" [(ngModel)]=\"elements[selectedindex].config.width\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkUploadAccept(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"accept\" placeholder=\"ä¸ä¼ æä»¶æ ¼å¼\" [(ngModel)]=\"elements[selectedindex].config.accept\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkIcon(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"icon\" placeholder=\"å¾æ \" [(ngModel)]=\"elements[selectedindex].config.icon\"> </mat-form-field> <mat-select flex=\"100\" *ngIf=\"checkIcon(elements[selectedindex].type)\" name=\"iconColor\" placeholder=\"å¾æ é¢è²\" [(ngModel)]=\"elements[selectedindex].config.iconColor\"> <mat-option value=\"\"></mat-option> <mat-option value=\"accent\">accent</mat-option> <mat-option value=\"primary\">primary</mat-option> <mat-option value=\"warn\">warn</mat-option> </mat-select> <mat-form-field flex=\"100\" *ngIf=\"checkSuffix(elements[selectedindex].type)\"> <input matInput type=\"text\" name=\"suffix\" placeholder=\"åç¼(åä½)\" [(ngModel)]=\"elements[selectedindex].config.suffix\"> </mat-form-field> <mat-form-field flex=\"100\" *ngIf=\"checkDepth(elements[selectedindex].type)\"> <textarea matInput rows=\"4\" name=\"depth\" placeholder=\"å¼æ­¥æ°æ®æ¥æº\" matTooltip=\"å¤å±çº§ç¨;éå¼ ${value}ä»£è¡¨ä¸ä¸çº§çkeyï¼å¡«åæ­¤å­æ®µæ°æ®å­å¸å°ä¸åçæ\" [(ngModel)]=\"elements[selectedindex].config.depth\"></textarea> </mat-form-field> </div> </form> </td-expansion-panel> </div> </div> "
            }
          ]
        }
      ],
      "members": {
        "panelForm": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChild"
                },
                "arguments": ["panelForm"]
              }
            ]
          }
        ],
        "elements": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": ["notify"]
                }
              ],
              null
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              },
              {
                "__symbolic": "reference",
                "module": "ng2-dragula",
                "name": "DragulaService"
              },
              { "__symbolic": "reference", "name": "any" },
              { "__symbolic": "reference", "name": "Éµk" }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "getDemo": [{ "__symbolic": "method" }],
        "registerDrop": [{ "__symbolic": "method" }],
        "validate": [{ "__symbolic": "method" }],
        "syncNameArr": [{ "__symbolic": "method" }],
        "elementClick": [{ "__symbolic": "method" }],
        "getElementIndex": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }],
        "checkDefault": [{ "__symbolic": "method" }],
        "checkMaxlength": [{ "__symbolic": "method" }],
        "checkMinMax": [{ "__symbolic": "method" }],
        "checkPattern": [{ "__symbolic": "method" }],
        "checkDatasource": [{ "__symbolic": "method" }],
        "checkDictionary": [{ "__symbolic": "method" }],
        "checkControls": [{ "__symbolic": "method" }],
        "checkSelectFIeld": [{ "__symbolic": "method" }],
        "checkMultiple": [{ "__symbolic": "method" }],
        "checkUploadAccept": [{ "__symbolic": "method" }],
        "checkIcon": [{ "__symbolic": "method" }],
        "checkSuffix": [{ "__symbolic": "method" }],
        "checkDepth": [{ "__symbolic": "method" }],
        "checkEntryWidth": [{ "__symbolic": "method" }],
        "ngOnDestroy": [{ "__symbolic": "method" }]
      }
    },
    "Éµq": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-cascad-select-entry",
              "template":
                "<h4 mat-dialog-title>{{title}}</h4> <mat-dialog-content> <div layout=\"row\" class=\"entry-search\"> <mat-form-field flex=\"90\"> <input matInput type=\"text\" [(ngModel)]=\"searchTerm\" placeholder=\"è¯·è¾å¥æ¥è¯¢æ¡ä»¶\"> </mat-form-field> <button flex=\"10\" flex-offset=\"10\" mat-icon-button matTooltip=\"æ¸ç©º\" matTooltipPosition=\"above\" (click)=\"clear()\"><mat-icon color=\"warn\">close</mat-icon></button> </div> <div> <span *ngFor=\"let s of selectedData;let last=last;let index=index\"> <a (click)=\"pop(index)\">{{s.value}}</a> <span *ngIf=\"!last\">/</span> </span> </div> <mat-nav-list> <td-virtual-scroll-container [style.height.vh]=\"52\" [data]=\"selections\"> <ng-template let-selection=\"row\" let-index=\"index\" let-last=\"last\" tdVirtualScrollRow> <mat-list-item (click)=\"select(selection)\"> {{selection[valueField]}} </mat-list-item> <mat-divider *ngIf=\"!last\"></mat-divider> </ng-template> </td-virtual-scroll-container> </mat-nav-list> </mat-dialog-content> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµr" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ]
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµq" }]
              },
              { "__symbolic": "reference", "name": "Éµr" },
              { "__symbolic": "reference", "name": "any" }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "initSelection": [{ "__symbolic": "method" }],
        "initAsyncSelection": [{ "__symbolic": "method" }],
        "loadAsyncSelection": [{ "__symbolic": "method" }],
        "select": [{ "__symbolic": "method" }],
        "initFuse": [{ "__symbolic": "method" }],
        "clear": [{ "__symbolic": "method" }],
        "pop": [{ "__symbolic": "method" }]
      }
    },
    "Éµr": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": ["http"]
                }
              ]
            ],
            "parameters": [{ "__symbolic": "reference", "name": "any" }]
          }
        ],
        "initSelection": [{ "__symbolic": "method" }],
        "loopSelection": [{ "__symbolic": "method" }],
        "initAsyncSelection": [{ "__symbolic": "method" }],
        "loadAsyncSelection": [{ "__symbolic": "method" }],
        "loadAsyncData": [{ "__symbolic": "method" }]
      }
    },
    "Éµs": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-dialog-entry",
              "template":
                "<mat-dialog-content> <div layout=\"row\" layout-align=\"start center\" class=\"pad-left-sm pad-right-sm\"> <span *ngIf=\"!searchBox.searchVisible\" class=\"push-left-sm\"> <span class=\"mat-title\">{{label}}</span> </span> <td-search-box #searchBox backIcon=\"arrow_back\" class=\"push-right-sm\" placeholder=\"å¨æ­¤è¾å¥æç´¢ä¿¡æ¯\" (searchDebounce)=\"search($event)\" flex> </td-search-box> </div> <mat-divider></mat-divider> <td-data-table #dataTable [data]=\"filteredData\" [columns]=\"columns\" [sortable]=\"true\" [sortBy]=\"sortBy\" [sortOrder]=\"sortOrder\" (sortChange)=\"sort($event)\" selectable=\"true\" [multiple]=\"multiple\" (rowSelect)=\"select($event)\" [(ngModel)]=\"selectedRows\"> </td-data-table> <div class=\"mat-padding\" *ngIf=\"!dataTable.hasData\" layout=\"row\" layout-align=\"center center\"> <h3>ææ æ°æ®ï¼</h3> </div> <td-paging-bar #pagingBar [total]=\"filteredTotal\" [pageSize]=\"pageSize\" (change)=\"page($event)\"> <span td-paging-bar-label hide-xs>æ¯è¡æ¾ç¤º:</span> <mat-select [style.width.px]=\"50\" [(ngModel)]=\"pageSize\"> <mat-option *ngFor=\"let size of [5,10,15,20,50]\" [value]=\"size\"> {{size}} </mat-option> </mat-select> <span>{{'ç¬¬ '+pagingBar.range+' æ¡   å± '+pagingBar.total+' æ¡'}}</span> </td-paging-bar> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button *ngIf=\"multiple\" mat-button (click)=\"multSelect()\"><mat-icon color=\"accent\">save</mat-icon>ç¡®å®</button> <button mat-button mat-dialog-close><mat-icon color=\"warn\">cancel</mat-icon>åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDataTableService"
              },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµs" }]
              },
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "sort": [{ "__symbolic": "method" }],
        "search": [{ "__symbolic": "method" }],
        "page": [{ "__symbolic": "method" }],
        "filter": [{ "__symbolic": "method" }],
        "detectChanges": [{ "__symbolic": "method" }],
        "select": [{ "__symbolic": "method" }],
        "multSelect": [{ "__symbolic": "method" }]
      }
    },
    "Éµt": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-select-entry",
              "template":
                "<h4 mat-dialog-title>{{title}}</h4> <mat-dialog-content> <div layout=\"row\" class=\"entry-search\"> <mat-form-field flex=\"80\"> <input matInput type=\"text\" [(ngModel)]=\"searchTerm\" placeholder=\"è¯·è¾å¥æ¥è¯¢æ¡ä»¶\"> </mat-form-field> <button flex=\"10\" *ngIf=\"!multiple\" flex-offset=\"10\" mat-icon-button matTooltip=\"æ¸ç©º\" matTooltipPosition=\"above\" (click)=\"clear()\"><mat-icon color=\"warn\">close</mat-icon></button> <button flex=\"10\" *ngIf=\"multiple\" mat-icon-button matTooltip=\"æ¸ç©º\" matTooltipPosition=\"above\" (click)=\"clear()\"><mat-icon color=\"warn\">close</mat-icon></button> <button flex=\"10\" *ngIf=\"multiple\" mat-icon-button matTooltip=\"ç¡®è®¤\" matTooltipPosition=\"above\" (click)=\"multSelect()\"><mat-icon color=\"accent\">check</mat-icon></button> </div> <mat-nav-list> <td-virtual-scroll-container [style.height.vh]=\"55\" [data]=\"selections\"> <ng-template let-selection=\"row\" let-index=\"index\" let-last=\"last\" tdVirtualScrollRow> <mat-list-item *ngIf=\"!multiple\" (click)=\"select(selection)\"> {{selection.value}} </mat-list-item> <mat-list-item *ngIf=\"multiple\" (click)=\"multChange(selection)\"> <mat-checkbox [(ngModel)]=\"selection.checked\" color=\"primary\" (click)=\"multChange(selection)\"> <span>{{selection.value}}</span> </mat-checkbox> </mat-list-item> <mat-divider *ngIf=\"!last\"></mat-divider> </ng-template> </td-virtual-scroll-container> </mat-nav-list> </mat-dialog-content> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ]
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµt" }]
              },
              { "__symbolic": "reference", "name": "any" }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "initFuse": [{ "__symbolic": "method" }],
        "select": [{ "__symbolic": "method" }],
        "multChange": [{ "__symbolic": "method" }],
        "multSelect": [{ "__symbolic": "method" }],
        "clear": [{ "__symbolic": "method" }]
      }
    },
    "Éµu": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµv" },
      "multi": true
    },
    "Éµv": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-input",
              "template":
                "<div class=\"dynamic-input-wrapper\" layout=\"column\"> <mat-form-field> <input #elementInput matInput [(ngModel)]=\"value\" [placeholder]=\"label\" [type]=\"type\" [required]=\"required\" [min]=\"min\" [max]=\"max\" [pattern]=\"pattern\" [maxlength]=\"maxlength\" [matTooltip]=\"tooltip\" [readonly]=\"readonly\" matTooltipPosition=\"above\" flex> <mat-icon *ngIf=\"config?.icon\" matPrefix [color]=\"config?.iconColor\">{{config.icon}}</mat-icon> <span *ngIf=\"config?.suffix\" matSuffix>{{config.suffix}}</span> <mat-hint *ngIf=\"maxlength\" align=\"end\">{{elementInput.value.length}} / {{maxlength}}</mat-hint> </mat-form-field> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµu" }]
            }
          ]
        }
      ],
      "members": { "ngOnInit": [{ "__symbolic": "method" }] }
    },
    "Éµw": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµx" },
      "multi": true
    },
    "Éµx": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-textarea",
              "template":
                "<div class=\"dynamic-textarea-wrapper\" layout=\"column\"> <mat-form-field> <textarea #elementInput matInput [(ngModel)]=\"value\" [placeholder]=\"label\" [required]=\"required\" rows=\"4\" [pattern]=\"pattern\" [maxlength]=\"maxlength\" [readonly]=\"readonly\" flex> </textarea> </mat-form-field> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµw" }]
            }
          ]
        }
      ],
      "members": {}
    },
    "Éµy": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµz" },
      "multi": true
    },
    "Éµz": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-slide-toggle",
              "template":
                "<div class=\"dynamic-slide-toggle-wrapper\"> <mat-slide-toggle [(ngModel)]=\"value\" [required]=\"required\" flex> {{label}} </mat-slide-toggle> </div>",
              "providers": [{ "__symbolic": "reference", "name": "Éµy" }]
            }
          ]
        }
      ],
      "members": { "ngOnInit": [{ "__symbolic": "method" }] }
    },
    "Éµba": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbb" },
      "multi": true
    },
    "Éµbb": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-checkbox",
              "template":
                "<div class=\"dynamic-checkbox-wrapper\"> <mat-checkbox [(ngModel)]=\"value\" [required]=\"required\" flex> {{label}} </mat-checkbox> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµba" }]
            }
          ]
        }
      ],
      "members": { "ngOnInit": [{ "__symbolic": "method" }] }
    },
    "Éµbc": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbd" },
      "multi": true
    },
    "Éµbd": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-slider",
              "template":
                "<div class=\"dynamic-slider-wrapper relative push-top\" flex layout=\"column\"> <label class=\"mat-input-placeholder mat-float td-slider-label\" [class.mat-focused]=\"slider._isActive\"> {{label}} <span *ngIf=\"required\" class=\"mat-placeholder-required\">*</span></label> <div layout=\"row\" layout-align=\"start center\" flex> <mat-slider #slider [(ngModel)]=\"value\" [min]=\"min\" [max]=\"max\" thumbLabel tickInterval=\"auto\" [required]=\"required\" flex> </mat-slider> </div>   </div>",
              "providers": [{ "__symbolic": "reference", "name": "Éµbc" }]
            }
          ]
        }
      ],
      "members": {}
    },
    "Éµbe": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbf" },
      "multi": true
    },
    "Éµbf": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-select",
              "template":
                "<div class=\"dynamic-input-wrapper\"> <mat-form-field> <!-- <mat-select #selectRef [(ngModel)]=\"value\" [multiple]=\"multiple\" [placeholder]=\"label\" [required]=\"required\"> <div layout=\"row\"> <mat-form-field flex=\"85\"> <input matInput flex> </mat-form-field> <button flex=\"15\" mat-icon-button (click)=\"control.reset();selectRef.close()\" matTooltip=\"æ¸ç©ºææéé¡¹\" matTooltipPosition=\"above\"> <mat-icon>close</mat-icon> </button> </div> <ng-template ngFor let-selection [ngForOf]=\"selections\"> <mat-option *ngIf=\"isObject(selection)\" [value]=\"selection.key\">{{selection.value}}</mat-option> <mat-option *ngIf=\"!isObject(selection)\" [value]=\"selection\">{{selection}}</mat-option> </ng-template> </mat-select> --> <input matInput type=\"text\" [(ngModel)]=\"showValue\" [placeholder]=\"label\" [required]=\"required\" readonly flex (click)=\"open()\"> <mat-icon matSuffix>arrow_drop_down</mat-icon> </mat-form-field> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbe" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "getValue": [{ "__symbolic": "method" }],
        "genSelections": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }]
      }
    },
    "Éµbg": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbh" },
      "multi": true
    },
    "Éµbh": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-datepicker",
              "template":
                "<div class=\"dynamic-input-wrapper\" layout=\"column\"> <!--<mat-form-field> <input matInput [(ngModel)]=\"value\" [placeholder]=\"label\" type=\"date\" [required]=\"required\" flex> </mat-form-field>--> <mat-form-field (click)=\"picker.open()\"> <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"value\" [placeholder]=\"label\" [required]=\"required\" flex readonly> <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle> </mat-form-field> <mat-datepicker #picker touchUi=\"true\"></mat-datepicker> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbg" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "name": "DateAdapter",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµbi" }]
              }
            ]
          }
        ]
      }
    },
    "Éµbi": {
      "__symbolic": "class",
      "extends": {
        "__symbolic": "reference",
        "module": "@angular/material",
        "name": "NativeDateAdapter"
      },
      "members": {
        "format": [{ "__symbolic": "method" }],
        "parse": [{ "__symbolic": "method" }]
      }
    },
    "Éµbj": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbk" },
      "multi": true
    },
    "Éµbk": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-checkboxgroup",
              "template":
                "<div class=\"dynamic-checkbox-group-wrapper\"> <label>{{label}}</label> <div layout-margin> <ng-template ngFor let-selection [ngForOf]=\"selections\" let-index=\"index\"> <mat-checkbox *ngIf=\"isObject(selection)\" (change)=\"change(index)\" [ngModel]=\"value.indexOf(selection) >= 0\" flex> {{selection.value}} </mat-checkbox> <mat-checkbox *ngIf=\"!isObject(selection)\" (change)=\"change(index)\" [ngModel]=\"value.indexOf(selection) >= 0\" flex> {{selection}} </mat-checkbox> </ng-template> </div> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbj" }]
            }
          ]
        }
      ],
      "members": {
        "change": [{ "__symbolic": "method" }],
        "isObject": [{ "__symbolic": "method" }]
      }
    },
    "Éµbl": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbm" },
      "multi": true
    },
    "Éµbm": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-chips",
              "template":
                "<div class=\"dynamic-chips-wrapper\" style=\"padding-bottom:24px\"> <td-chips [items]=\"items\" [(ngModel)]=\"value\" [placeholder]=\"label\" [disabled]=\"readonly\" requireMatch [required]=\"required\" (add)=\"add($event)\" (remove)=\"remove($event)\"> </td-chips> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbl" }]
            }
          ]
        }
      ],
      "members": {
        "ngOnInit": [{ "__symbolic": "method" }],
        "add": [{ "__symbolic": "method" }],
        "remove": [{ "__symbolic": "method" }]
      }
    },
    "Éµbn": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbo" },
      "multi": true
    },
    "Éµbo": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-radio",
              "template":
                "<div class=\"dynamic-radio-wrapper\"> <p>{{label}}</p> <mat-radio-group [name]=\"label\" [(ngModel)]=\"value\" layout=\"row\" layout-margin> <ng-template ngFor let-selection [ngForOf]=\"selections\"> <mat-radio-button *ngIf=\"isObject(selection)\" [value]=\"selection.key\" [name]=\"label\" flex> {{selection.value}} </mat-radio-button> <mat-radio-button *ngIf=\"!isObject(selection)\" [value]=\"selection\" [name]=\"label\" flex>{{selection}}</mat-radio-button> </ng-template> </mat-radio-group> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbn" }]
            }
          ]
        }
      ],
      "members": { "isObject": [{ "__symbolic": "method" }] }
    },
    "Éµbp": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbq" },
      "multi": true
    },
    "Éµbq": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-dialog-select",
              "template":
                "<div class=\"dynamic-dialog-select-wrapper\" layout=\"column\"> <mat-form-field (click)=\"open()\"> <input  matInput [(ngModel)]=\"showValue\" [placeholder]=\"label\" [required]=\"required\" readonly=\"true\" flex> </mat-form-field> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbp" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }]
      }
    },
    "Éµbr": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbs" },
      "multi": true
    },
    "Éµbs": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-data-form",
              "template":
                "<div class=\"dynamic-data-form-wrapper\"> <label>{{label}}</label> <button mat-icon-button color=\"accent\" (click)=\"add()\"> <mat-icon>add</mat-icon> </button> <td-virtual-scroll-container #virtualScroll [style.height.px]=\"410\" [data]=\"value\"> <ng-template let-index=\"index\" let-last=\"last\" tdVirtualScrollRow> <div layout=\"row\" *ngIf=\"value[index]._$state_ !== 3\"> <button flex=\"10\" mat-icon-button (click)=\"remove(index)\"> <mat-icon color=\"warn\">remove</mat-icon> </button> <div flex=\"90\" layout=\"row\" layout-wrap layout-margin layout-align=\"start center\"> <div flex-xs=\"50\" flex-gt-xs=\"25\" *ngFor=\"let control of controls\" [ngSwitch]=\"control.type\"> <mat-checkbox (change)=\"change(index)\" *ngSwitchCase=\"'boolean'\" [(ngModel)]=\"value[index][control.name]\" [name]=\"control.name\" [required]=\"control.required\"> {{control.label}} </mat-checkbox> <mat-form-field *ngSwitchCase=\"'enum'\"> <mat-select (change)=\"change(index)\" [(ngModel)]=\"value[index][control.name]\" [placeholder]=\"control.label\" [required]=\"control.required\"> <ng-template ngFor let-opt [ngForOf]=\"control.selections\"> <mat-option *ngIf=\"isObject(opt)\" [value]=\"opt.key\">{{opt.value}}</mat-option> <mat-option *ngIf=\"!isObject(opt)\" [value]=\"opt\">{{opt}}</mat-option> </ng-template> </mat-select> </mat-form-field> <mat-form-field flex=\"95\" *ngSwitchCase=\"'date'\" (click)=\"picker.open()\"> <input matInput [matDatepicker]=\"picker\" [name]=\"control.name\" [(ngModel)]=\"value[index][control.name]\" [placeholder]=\"control.label\" readonly> <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle> </mat-form-field> <mat-datepicker #picker></mat-datepicker> <mat-form-field *ngSwitchDefault> <input (change)=\"change(index)\" matInput [(ngModel)]=\"value[index][control.name]\" [name]=\"control.name\" [placeholder]=\"control.label\" [type]=\"control.type\" [required]=\"control.required\" [readonly]=\"control.readonly\"> </mat-form-field> </div> </div> </div> </ng-template> </td-virtual-scroll-container> <!--           <td-paging-bar #pagingBar [total]=\"filteredTotal\" [pageSize]=\"pageSize\" (change)=\"page($event)\"> <span td-paging-bar-label hide-xs>æ¯è¡æ¾ç¤º:</span> <mat-select [style.width.px]=\"50\" [(ngModel)]=\"pageSize\"> <mat-option *ngFor=\"let size of [5,10,15,20,50]\" [value]=\"size\"> {{size}} </mat-option> </mat-select> <span>{{'ç¬¬ '+pagingBar.range+' æ¡   å± '+pagingBar.total+' æ¡'}}</span> </td-paging-bar> --> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbr" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "getModel": [{ "__symbolic": "method" }],
        "add": [{ "__symbolic": "method" }],
        "insertData": [{ "__symbolic": "method" }],
        "remove": [{ "__symbolic": "method" }],
        "isObject": [{ "__symbolic": "method" }],
        "change": [{ "__symbolic": "method" }],
        "page": [{ "__symbolic": "method" }]
      }
    },
    "Éµbt": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbu" },
      "multi": true
    },
    "Éµbu": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-file",
              "template":
                "<div class=\"dynamic-input-wrapper\" layout=\"row\"> <mat-form-field tdFileDrop [multiple]=\"multiple\" (fileDrop)=\"value = $event\" (click)=\"fileInput.inputElement.click()\" flex> <input matInput [placeholder]=\"label\" [value]=\"value?.length ? ('å± ' + value?.length + ' ä¸ªæä»¶') : value?.name\" readonly [required]=\"required\" /> </mat-form-field> <button mat-icon-button *ngIf=\"value?.path\" (click)=\"preview(value.path)\"> <mat-icon color=\"accent\">file_download</mat-icon> </button> <button mat-icon-button *ngIf=\"value\" (click)=\"value=null\"> <mat-icon color=\"warn\">cancel</mat-icon> </button> <td-file-input class=\"push-left-xs push-right-xs\" #fileInput [(ngModel)]=\"value\" [multiple]=\"multiple\" [accept]=\"config?.accept\" (select)=\"select($event)\"> <mat-icon color=\"accent\">folder</mat-icon> <span class=\"text-upper\">éæ©æä»¶</span> </td-file-input> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbt" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": ["notify"]
                }
              ],
              null
            ],
            "parameters": [
              { "__symbolic": "reference", "name": "any" },
              { "__symbolic": "reference", "name": "Éµk" }
            ]
          }
        ],
        "select": [{ "__symbolic": "method" }],
        "preview": [{ "__symbolic": "method" }]
      }
    },
    "Éµbv": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµbw" },
      "multi": true
    },
    "Éµbw": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-rich-editor",
              "template":
                "<div class=\"dynamic-rich-deitor-wrapper\"> <p>{{label}}</p> <div class=\"summernote\"></div> </div>",
              "providers": [{ "__symbolic": "reference", "name": "Éµbv" }]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ElementRef"
              }
            ]
          }
        ],
        "refresh": [{ "__symbolic": "method" }],
        "isEmpty": [{ "__symbolic": "method" }],
        "ngOnInit": [{ "__symbolic": "method" }],
        "ngOnDestroy": [{ "__symbolic": "method" }],
        "getCode": [{ "__symbolic": "method" }]
      }
    },
    "Éµbx": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµby" },
      "multi": true
    },
    "Éµby": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-code-editor",
              "template":
                "<div class=\"dynamic-code-deitor-wrapper\"> <p>{{label}}</p> <!-- <td-code-editor style=\"height: 200px\" editorStyle=\"border:0;\" flex theme=\"vs\" [editorStyle]=\"theme\" language=\"sql\" automaticLayout [(ngModel)]=\"value\" (change)=\"callBackFunc()\"> </td-code-editor> --> </div> ",
              "providers": [{ "__symbolic": "reference", "name": "Éµbx" }]
            }
          ]
        }
      ],
      "members": { "callBackFunc": [{ "__symbolic": "method" }] }
    },
    "Éµbz": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµca" },
      "multi": true
    },
    "Éµca": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-cascad-select",
              "template":
                "<div class=\"dynamic-cascad-select-wrapper\" layout=\"column\"> <mat-form-field> <input matInput type=\"text\" [(ngModel)]=\"showValue\" [placeholder]=\"label\" [required]=\"required\" readonly flex (click)=\"open()\"> <mat-icon matSuffix>arrow_drop_down</mat-icon> </mat-form-field> </div> ",
              "providers": [
                { "__symbolic": "reference", "name": "Éµbz" },
                { "__symbolic": "reference", "name": "Éµr" }
              ]
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              { "__symbolic": "reference", "name": "Éµr" },
              {
                "__symbolic": "reference",
                "module": "@angular/material",
                "name": "MatDialog"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "change": [{ "__symbolic": "method" }],
        "init": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }]
      }
    },
    "Éµcb": {
      "provide": {
        "__symbolic": "reference",
        "module": "@angular/forms",
        "name": "NG_VALUE_ACCESSOR"
      },
      "useExisting": { "__symbolic": "reference", "name": "Éµcc" },
      "multi": true
    },
    "Éµcc": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "Éµo" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-dynamic-cascad-dialog",
              "template": "<p> dynamic-cascad-dialog works! </p>",
              "providers": [{ "__symbolic": "reference", "name": "Éµcb" }]
            }
          ]
        }
      ],
      "members": {}
    },
    "Éµcd": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-step-form",
              "template":
                "<td-steps [mode]=\"mode\"> <ng-template ngFor [ngForOf]=\"forms\" let-form let-index=\"index\" let-last=\"last\"> <td-step #step [sublabel]=\"'ç¬¬ '+(index+1)+' æ­¥'\" [active]=\"actives[index]\" [state]=\"states[index]\" [disabled]=\"disableds[index]\"> <mh-dynamic-form #dynamicForm [elements]=\"form.controls?form.controls:form\" [default]=\"default[index]\"> </mh-dynamic-form> <ng-template td-step-actions alian=\"end\"> <button *ngIf=\"index!==0\" mat-button (click)=\"pre(index,dynamicForm.value)\"><mat-icon color=\"warn\">chevron_left</mat-icon>ä¸ä¸æ­¥</button> <button *ngIf=\"!last\" [disabled]=\"!dynamicForm.valid\" mat-button (click)=\"next(index,dynamicForm.value)\"><mat-icon color=\"accent\">chevron_right</mat-icon>ä¸ä¸æ­¥</button> </ng-template> </td-step> </ng-template> </td-steps> "
            }
          ]
        }
      ],
      "members": {
        "dynamicForms": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "ViewChildren"
                },
                "arguments": ["dynamicForm"]
              }
            ]
          }
        ],
        "forms": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "default": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "mode": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "__ctor__": [{ "__symbolic": "constructor" }],
        "initArr": [{ "__symbolic": "method" }],
        "pre": [{ "__symbolic": "method" }],
        "next": [{ "__symbolic": "method" }],
        "ngOnDestroy": [{ "__symbolic": "method" }]
      }
    },
    "Éµce": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "BaseTable" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-table-entry",
              "template":
                "<mat-dialog-content> <div layout=\"row\" layout-align=\"start center\" class=\"pad-left-sm pad-right-sm\"> <span *ngIf=\"!searchBox.searchVisible\" class=\"push-left-sm\"> <div style=\"font-size: 15px;margin-bottom:15px\">{{label}}</div> </span> <td-search-box #searchBox backIcon=\"arrow_back\" class=\"push-right-sm\" placeholder=\"å¨æ­¤è¾å¥æç´¢ä¿¡æ¯\" (searchDebounce)=\"search($event)\" flex> </td-search-box> </div> <mat-divider></mat-divider> <td-data-table #dataTable [data]=\"filteredData\" [columns]=\"columns\" [sortable]=\"true\" [sortBy]=\"sortBy\" [sortOrder]=\"sortOrder\" (sortChange)=\"sort($event)\" [selectable]=\"selected\" [multiple]=\"multiple\" (rowSelect)=\"select($event)\" [(ngModel)]=\"selectedRows\"> </td-data-table> <div class=\"mat-padding\" *ngIf=\"!dataTable.hasData\" layout=\"row\" layout-align=\"center center\"> <h3>ææ æ°æ®ï¼</h3> </div> <td-paging-bar #pagingBar [total]=\"filteredTotal\" [pageSize]=\"pageSize\" (change)=\"page($event)\"> <span td-paging-bar-label hide-xs>æ¯è¡æ¾ç¤º:</span> <mat-select [style.width.px]=\"50\" [(ngModel)]=\"pageSize\"> <mat-option *ngFor=\"let size of [5,10,15,20,50]\" [value]=\"size\"> {{size}} </mat-option> </mat-select> <span>{{'ç¬¬ '+pagingBar.range+' æ¡ å± '+pagingBar.total+' æ¡'}}</span> </td-paging-bar> </mat-dialog-content> <mat-dialog-actions align=\"end\"> <button *ngIf=\"multiple\" mat-button (click)=\"multSelect()\" class=\"btn-blue\">ç¡®å®</button> <button mat-button mat-dialog-close class=\"btn-gray\">åæ¶</button> </mat-dialog-actions> "
            }
          ]
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameterDecorators": [
              null,
              null,
              [
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@angular/core",
                    "name": "Inject"
                  },
                  "arguments": [
                    {
                      "__symbolic": "reference",
                      "module": "@angular/material",
                      "name": "MAT_DIALOG_DATA"
                    }
                  ]
                }
              ],
              null
            ],
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDataTableService"
              },
              {
                "__symbolic": "reference",
                "name": "MatDialogRef",
                "module": "@angular/material",
                "arguments": [{ "__symbolic": "reference", "name": "Éµce" }]
              },
              { "__symbolic": "reference", "name": "any" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "select": [{ "__symbolic": "method" }],
        "multSelect": [{ "__symbolic": "method" }]
      }
    },
    "Éµcf": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-simple-table",
              "template": "<p> simple-table works! </p> "
            }
          ]
        }
      ],
      "members": {}
    },
    "Éµcg": {
      "__symbolic": "class",
      "extends": { "__symbolic": "reference", "name": "BaseTable" },
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-task",
              "template":
                "<div class=\"mat-content\" class=\"inset\"> <div *ngIf=\"!formMode\" layout=\"column\" layout-gt-sm=\"row\"> <div flex-gt-sm=\"100\"> <mat-card> <div layout=\"row\" layout-align=\"start center\" class=\"pad-left-sm pad-right-sm\"> <span *ngIf=\"!searchBox.searchVisible\" class=\"push-left-sm\"> <span class=\"mat-title\">{{title?title + ' - ':''}}ä»»å¡åè¡¨</span> </span> <td-search-box #searchBox backIcon=\"arrow_back\" class=\"push-right-sm\" placeholder=\"å¨æ­¤è¾å¥æç´¢ä¿¡æ¯\" (searchDebounce)=\"search($event)\" flex> </td-search-box> </div> <mat-divider></mat-divider> <td-data-table #dataTable [data]=\"filteredData\" [columns]=\"columns\" [sortable]=\"true\" [sortBy]=\"sortBy\" [sortOrder]=\"sortOrder\" (sortChange)=\"sort($event)\"> <ng-template *ngIf=\"hasColumn('name')\" tdDataTableTemplate=\"name\" let-row=\"row\" let-value=\"value\"> <div layout=\"row\"> <button mat-button (click)=\"trace(row)\" matTooltip=\"æµç¨è·è¸ª\" matTooltipPosition=\"above\">{{value}}</button> </div> </ng-template> <ng-template *ngIf=\"hasColumn('operation')\" tdDataTableTemplate=\"operation\" let-row=\"row\"> <div layout=\"row\"> <button mat-icon-button matTooltip=\"åç\" (click)=\"handle(row)\"><mat-icon color=\"accent\">assignment</mat-icon></button> </div> </ng-template> <ng-template *ngIf=\"hasColumn('createTime')\" tdDataTableTemplate=\"createTime\" let-value=\"value\"> <div layout=\"row\"> {{value | date:\"yyyy-MM-dd HH:mm:ss\"}} </div> </ng-template> <ng-content></ng-content> </td-data-table> <div class=\"mat-padding\" *ngIf=\"!dataTable.hasData\" layout=\"row\" layout-align=\"center center\"> <h3>ææ æ°æ®ï¼</h3> </div> <td-paging-bar #pagingBar [total]=\"filteredTotal\" [pageSize]=\"pageSize\" (change)=\"page($event)\"> <span td-paging-bar-label hide-xs>æ¯è¡æ¾ç¤º:</span> <mat-select [style.width.px]=\"50\" [(ngModel)]=\"pageSize\"> <mat-option *ngFor=\"let size of [5,10,15,20,50]\" [value]=\"size\"> {{size}} </mat-option> </mat-select> <span>{{'ç¬¬ '+pagingBar.range+' æ¡   å± '+pagingBar.total+' æ¡'}}</span> </td-paging-bar> </mat-card> </div> </div> <div *ngIf=\"formMode\" [@flyIn]=\"'in'\"> <mh-task-form [forms]=\"formControls\" [data]=\"formData\" [editable]=\"formEditable\" (close)=\"save($event)\" [showDialog]=\"handleDialog\"></mh-task-form> </div> </div> ",
              "animations": [
                { "__symbolic": "reference", "name": "flyIn" },
                {
                  "__symbolic": "call",
                  "expression": {
                    "__symbolic": "reference",
                    "module": "@covalent/core",
                    "name": "TdCollapseAnimation"
                  }
                }
              ]
            }
          ]
        }
      ],
      "members": {
        "key": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "title": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "columns": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "sortBy": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "handleDialog": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "customFilter": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              {
                "__symbolic": "reference",
                "module": "@covalent/core",
                "name": "TdDataTableService"
              },
              { "__symbolic": "reference", "name": "NotificationService" },
              { "__symbolic": "reference", "name": "Éµch" },
              {
                "__symbolic": "reference",
                "module": "@angular/core",
                "name": "ChangeDetectorRef"
              }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "get": [{ "__symbolic": "method" }],
        "trace": [{ "__symbolic": "method" }],
        "handle": [{ "__symbolic": "method" }],
        "save": [{ "__symbolic": "method" }],
        "cancel": [{ "__symbolic": "method" }],
        "canEdit": [{ "__symbolic": "method" }],
        "filterBizData": [{ "__symbolic": "method" }],
        "hasColumn": [{ "__symbolic": "method" }]
      }
    },
    "Éµch": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Injectable"
          }
        }
      ],
      "members": {
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [{ "__symbolic": "reference", "name": "HttpService" }]
          }
        ],
        "getFormByProcessKey": [{ "__symbolic": "method" }],
        "getProcessInfo": [{ "__symbolic": "method" }],
        "getDynamicField": [{ "__symbolic": "method" }],
        "completeTask": [{ "__symbolic": "method" }],
        "updateProcess": [{ "__symbolic": "method" }],
        "finishProcess": [{ "__symbolic": "method" }],
        "getTaskList": [{ "__symbolic": "method" }]
      }
    },
    "Éµci": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-task-form",
              "template":
                "<div layout=\"row\"> <div flex-gt-sm=\"100\"> <mat-card> <mat-card-title>ä»»å¡åç</mat-card-title> <mat-card-content> <div> <button *ngIf=\"showDialog\" mat-button (click)=\"open()\"><mat-icon color=\"accent\">announcement</mat-icon>{{editable? 'è°æ´è¡¨åæ°æ®':'å®¡æ ¸è¡¨åæ°æ®'}}</button> <p *ngIf=\"!showDialog\" flex=\"20\" flex-offset=\"2\" style=\"padding:16px\">è¡¨åæ°æ®:</p> <mh-step-form #dataForm *ngIf=\"!showDialog\" flex [forms]=\"forms\" [mode]=\"'horizontal'\" [default]=\"default\"></mh-step-form> </div> <div *ngIf=\"editable\" layout=\"row\" style=\"padding:16px\"> <p flex=\"10\" flex-offset=\"2\">é©³åæè§:</p> <p flex=\"88\">{{opinion}}</p> </div> <mh-dynamic-form #form [elements]=\"elements\"></mh-dynamic-form> </mat-card-content> <mat-card-actions align=\"end\"> <button mat-button [disabled]=\"!form.valid\" (click)=\"save(form.value)\"><mat-icon color=\"accent\">save</mat-icon>æäº¤</button> <button mat-button (click)=\"cancel()\"><mat-icon color=\"warn\">cancel</mat-icon>åæ¶</button> </mat-card-actions> </mat-card> </div> </div> "
            }
          ]
        }
      ],
      "members": {
        "forms": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "data": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "editable": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "close": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                }
              }
            ]
          }
        ],
        "showDialog": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "__ctor__": [
          {
            "__symbolic": "constructor",
            "parameters": [
              { "__symbolic": "reference", "name": "MhFormsService" }
            ]
          }
        ],
        "ngOnInit": [{ "__symbolic": "method" }],
        "open": [{ "__symbolic": "method" }],
        "save": [{ "__symbolic": "method" }],
        "cancel": [{ "__symbolic": "method" }]
      }
    },
    "Éµcj": {
      "__symbolic": "class",
      "decorators": [
        {
          "__symbolic": "call",
          "expression": {
            "__symbolic": "reference",
            "module": "@angular/core",
            "name": "Component"
          },
          "arguments": [
            {
              "selector": "mh-tree-view",
              "template":
                "<tree-root [nodes]=\"nodes\" (activate)=\"select($event)\" [options]=\"options\"> <ng-template #treeNodeTemplate let-node let-index=\"index\"> <div layout=\"row\" layout-align=\" center\"> <mat-checkbox *ngIf=\"multiple\" [checked]=\"node.data.checked\" [indeterminate]=\"node.data.indeterminate\" (change)=\"check(node, $event)\" color=\"primary\"> <span>&nbsp;</span> </mat-checkbox> <mat-icon color=\"accent\">{{node.data[nodeIcon] || icon}}</mat-icon> <span class=\"push-left-xs\">{{ node.data[nodeName] }}</span> </div> </ng-template> </tree-root> "
            }
          ]
        }
      ],
      "members": {
        "icon": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "nodes": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "multiple": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "nodeName": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "nodeIcon": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Input"
                }
              }
            ]
          }
        ],
        "selected": [
          {
            "__symbolic": "property",
            "decorators": [
              {
                "__symbolic": "call",
                "expression": {
                  "__symbolic": "reference",
                  "module": "@angular/core",
                  "name": "Output"
                }
              }
            ]
          }
        ],
        "select": [{ "__symbolic": "method" }],
        "check": [{ "__symbolic": "method" }],
        "updateChildNodesCheckBox": [{ "__symbolic": "method" }],
        "updateParentNodesCheckBox": [{ "__symbolic": "method" }]
      }
    }
  },
  "origins": {
    "flyIn": "./animations/fly-in",
    "fadeIn": "./animations/fade-in",
    "Éµa": "./components/forms/search-form/search-form.component",
    "MhCalendarModule": "./components/calendar/calendar.module",
    "MhCalendarService": "./components/calendar/calendar.service",
    "MhFileModule": "./components/file/file.module",
    "MhFileService": "./components/file/file.service",
    "MhFormsModule": "./components/forms/forms.module",
    "MhFormsService": "./components/forms/forms.service",
    "MhDynamicFormModule":
      "./components/forms/dynamic-form/dynamic-form.module",
    "MhStepFormModule": "./components/forms/step-form/step-form.module",
    "MhSearchFormModule": "./components/forms/search-form/search-form.module",
    "MhDynamicFormType": "./components/forms/dynamic-form/dynamic-form.entity",
    "MhDynamicFormElement":
      "./components/forms/dynamic-form/dynamic-form.entity",
    "MhDynamicFormElementConfig":
      "./components/forms/dynamic-form/dynamic-form.entity",
    "DynamicEntryComponent":
      "./components/forms/dynamic-form/dynamic-entry.component",
    "ISearchConfig": "./components/forms/search-form/search-form.component",
    "SearchEntryComponent":
      "./components/forms/search-form/search-entry.component",
    "StepEntryComponent": "./components/forms/step-form/step-entry.component",
    "BaseTable": "./components/table/base-table",
    "TableService": "./components/table/table.service",
    "MhTableModule": "./components/table/table.module",
    "MhTaskModule": "./components/task/task.module",
    "MhTreeViewModule": "./components/tree-view/tree-view.module",
    "HttpService": "./services/http.service",
    "HttpUtilService": "./services/http-util.service",
    "NotificationService": "./services/notification.service",
    "ToolService": "./services/tool.service",
    "MhServicesModule": "./services/services.module",
    "Éµb": "./components/calendar/month-view.component",
    "Éµc": "./components/calendar/week-view.component",
    "Éµd": "./components/calendar/week-entry.component",
    "Éµe": "./components/calendar/confirm-entry.component",
    "Éµf": "./components/file/upload-dialog.component",
    "Éµg": "./components/file/import-dialog.component",
    "Éµh": "./components/file/export-dialog.component",
    "Éµi": "./components/forms/dynamic-form/dynamic-form.component",
    "Éµj": "./components/forms/dynamic-form/dynamic-form.service",
    "Éµk": "./components/forms/dynamic-form/dynamic-loader.service",
    "Éµl": "./components/forms/dynamic-form/dynamic-element.component",
    "Éµm": "./components/forms/dynamic-form/dynamic-element.component",
    "Éµn": "./components/forms/dynamic-form/dynamic-element.component",
    "Éµo":
      "./components/forms/dynamic-form/dynamic-elements/abstract-control-value-accesor",
    "Éµp": "./components/forms/dynamic-form/form-design.component",
    "Éµq":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-select/cascad-select-entry.component",
    "Éµr":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-select/cascad-select.service",
    "Éµs":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-dialog-entry.component",
    "Éµt":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-select-entry.component",
    "Éµu":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-input/dynamic-input.component",
    "Éµv":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-input/dynamic-input.component",
    "Éµw":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-textarea/dynamic-textarea.component",
    "Éµx":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-textarea/dynamic-textarea.component",
    "Éµy":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-slide-toggle/dynamic-slide-toggle.component",
    "Éµz":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-slide-toggle/dynamic-slide-toggle.component",
    "Éµba":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-checkbox/dynamic-checkbox.component",
    "Éµbb":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-checkbox/dynamic-checkbox.component",
    "Éµbc":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-slider/dynamic-slider.component",
    "Éµbd":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-slider/dynamic-slider.component",
    "Éµbe":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-select/dynamic-select.component",
    "Éµbf":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-select/dynamic-select.component",
    "Éµbg":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-datepicker/dynamic-datepicker.component",
    "Éµbh":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-datepicker/dynamic-datepicker.component",
    "Éµbi": "./components/forms/dynamic-form/dynamic-date-adapter",
    "Éµbj":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-checkbox-group/dynamic-checkbox-group.component",
    "Éµbk":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-checkbox-group/dynamic-checkbox-group.component",
    "Éµbl":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-chips/dynamic-chips.component",
    "Éµbm":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-chips/dynamic-chips.component",
    "Éµbn":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-radio/dynamic-radio.component",
    "Éµbo":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-radio/dynamic-radio.component",
    "Éµbp":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-dialog-select/dynamic-dialog-select.component",
    "Éµbq":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-dialog-select/dynamic-dialog-select.component",
    "Éµbr":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-data-form/dynamic-data-form.component",
    "Éµbs":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-data-form/dynamic-data-form.component",
    "Éµbt":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-file/dynamic-file.component",
    "Éµbu":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-file/dynamic-file.component",
    "Éµbv":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-rich-editor/dynamic-rich-editor.component",
    "Éµbw":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-rich-editor/dynamic-rich-editor.component",
    "Éµbx":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-code-editor/dynamic-code-editor.component",
    "Éµby":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-code-editor/dynamic-code-editor.component",
    "Éµbz":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-select/dynamic-cascad-select.component",
    "Éµca":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-select/dynamic-cascad-select.component",
    "Éµcb":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-dialog/dynamic-cascad-dialog.component",
    "Éµcc":
      "./components/forms/dynamic-form/dynamic-elements/dynamic-cascad-dialog/dynamic-cascad-dialog.component",
    "Éµcd": "./components/forms/step-form/step-form.component",
    "Éµce": "./components/table/table-entry.component",
    "Éµcf": "./components/table/simple-table.component",
    "Éµcg": "./components/task/task.component",
    "Éµch": "./components/task/task.service",
    "Éµci": "./components/task/task-form.component",
    "Éµcj": "./components/tree-view/tree-view.component"
  },
  "importAs": "xhhng"
}
